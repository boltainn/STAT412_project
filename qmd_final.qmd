---
title: "Untitled"
format: html
editor: visual
cache: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r library, include=FALSE}
library(knitr)
library(mice)
library(tidyverse)
library(ggplot2)
library(kableExtra)
library(reshape2)
library(caret)
library(e1071)
library(glmnet)
library(corrplot)
library(car)
library(pROC)
```

## 1. Brief Statement of The Aim of The Project

In this project, data is 4 different tennis singles 2013 grand slams match statistics. In the data, there are different statistics about match like foul, number of firs serve win, and others that will be explained in the next part. Aim of the project is predict the result of the tennis match by using different match statistics. Another aim is to find most effective match statistics for the win. To reach this aim, firstly, data will be cleaned and tidied for the EDA and CDA. Then, explanatory data analysis and confirmatory data analysis will be done to see how data distributed and to interpret variables effectively. Then, missing values will be handled and data manipulation and feature engineering will be done if it is necessary. Finally, for statistical modeling to predict match result cross-validation techniques will be used. And, statistical modeling will be performed and performance of statistical modeling will be investigated.

## 2. Source of The Data, Variables and Dependent Variable

```{r combine_DF, include=FALSE}
## Getting data
AusOpenMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/AusOpen-men-2013.csv")
AusOpenWoMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/AusOpen-women-2013.csv")

FrenchOpenMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/FrenchOpen-men-2013.csv")
FrenchOpenWoMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/FrenchOpen-women-2013.csv")

USOpenMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/USOpen-men-2013.csv")
USOpenWoMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/USOpen-women-2013.csv")

WimbledonMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/Wimbledon-men-2013.csv")
WimbledonWoMen <- read.csv("https://raw.githubusercontent.com/boltainn/Tennis_project/main/tennis_data/Wimbledon-women-2013.csv")
##

##Combine all data and create new variables as "tournament" and "gender"

list_df <- list(AusOpenMen,AusOpenWoMen,FrenchOpenMen,FrenchOpenWoMen,USOpenMen,USOpenWoMen,WimbledonMen,WimbledonWoMen)

tournament_names<-c('AusOpen','AusOpen', 'FrenchOpen', 'FrenchOpen',
                   'USopen', 'USopen', 'Wimbledon', 'Wimbledon')

gender_name<- c('M','F','M','F','M','F','M','F')

## Adding two new variable
for(i in 1:8){
  tournament=rep(tournament_names[i],dim(list_df[[i]])[1])
  gender=rep(gender_name[i], dim(list_df[[i]])[1])
  list_df[[i]]$tournament=tournament
  list_df[[i]]$gender=gender
}

##Variable name fixing
col_names <- names(list_df[[3]])
for(i in 1:8){
  names(list_df[[i]]) = col_names
}

##Create combined data
GrandSlam <- rbind(list_df[[1]],list_df[[2]],list_df[[3]],list_df[[4]],list_df[[5]],list_df[[6]],
                    list_df[[7]],list_df[[8]])

```

Source of the data is [UC Irvine Machine Learning Repository](https://archive.ics.uci.edu/dataset/300/tennis+major+tournament+match+statistics). In the source of the data, there is 8 different csv file. Each one represent different tournament from 2013 (Aus Open-Men,AusOpen-Women, USOpen-men,...). Data has 4 different tournament group by gender, so we have 8 different csv file data. All of the 8 csv data has same 42 variables, so all of them are combined to 1 csv file and 2 variable added as tournament and gender. At the end, data has 44 variable. Variable descriptions can be seen on [APPENDÄ°X A](#appendix-a). Dependent variable is 'Result'. Our data have `r dim(GrandSlam)[1]` match observations.

## 3. Data Cleaning and Tidying

Check variables and data types for character variables and some variables that should be factor. Others are already numeric type as desired.

```{r structure, echo=FALSE}
dumy<-GrandSlam%>%select(c(Result,Player1,Player2,Round,tournament,gender))
str(dumy)
```

Character values, "Round" and "Result" should be a factor. And name of the variables should be all upper or lower letter. So, all names of variables changed to upper letter.

```{r upper, echo=FALSE}
## Change all varaiable names to upper letter
colnames(GrandSlam) <- toupper(colnames(GrandSlam))
colnames(GrandSlam)
```

Before change character values, "Round" and "Result" to factor let's check head and tail of the data set. There is 44 variable, so visualizing the head and tail is not feasible. Therefore, just problematic variable parts of the data shown.

Head and tail of the PLAYER1 and PLAYER2:

```{r head_tail, echo=FALSE}
kable(head(GrandSlam[,c(1:2)],3), label = "Head of the data")
kable(tail(GrandSlam[,c(1:2)],3),label = "Tail of the data")
```

As seen on the "PLAYER1" and "PLAYER2", there is problem about how player names saved to data. In some rows player names saved as full name (first name + surname). However, in other rows, player names saved as shortened way like "M.Bartolli". This problem fixed by convert all names shortened.

```{r convert_player, include=FALSE}
#Function that shortened names as like "M.Bartolli"
convert_player_name <- function(player_name){
  name_parts <- strsplit(player_name, " ")[[1]]
  first_name <- name_parts[1]
  if(grepl("\\.", first_name) & (!grepl("\\.\\s", player_name))){
    return(first_name)
  }
  else if(grepl("\\-", first_name)){
    other_names <- name_parts[-1]
    first_name_parts <- strsplit(first_name, "-")[[1]]
    first_name_parts_1 <- first_name_parts[1]
    first_name_parts_2 <- first_name_parts[2]
    first_initial_1 <- substr(first_name_parts_1, 1, 1)
    first_initial_2 <- substr(first_name_parts_2, 1, 1)
    first_initial <- paste0(first_initial_1, "-", first_initial_2)
    remaining_name <- paste(name_parts[-1], collapse = " ")
    new_name <- paste0(first_initial, ".", remaining_name)
    return(new_name)
  }
  else {
    other_names <- name_parts[-1]
    first_initial <- substr(first_name, 1, 1)
    remaining_name <- paste(name_parts[-1], collapse = " ")
    new_name <- paste0(first_initial, ".", remaining_name)
    return(new_name)
  }
}
# Apply the function to each element of the player name column
converted_names_1 <- sapply(GrandSlam$PLAYER1, convert_player_name)
converted_names_2 <- sapply(GrandSlam$PLAYER2, convert_player_name)
GrandSlam$PLAYER1<- converted_names_1
GrandSlam$PLAYER2 <- converted_names_2

#There is some cases names are saved diffrent way for the same player, This function fixed that problem
fixed_name <- function(player_name){
  if(grepl("T.De",player_name) | grepl("T.de",player_name)){
    return("T.De Bakker")
  }
  if(grepl("P.Carreno",player_name)){
    return("P.Carreno")
  }
  if(grepl("Koehler",player_name)){
    return("M.Koehler")
  }
  if(grepl("Pliskova",player_name)){
    return("K.Pliskova")
  }
  if(grepl("Struff",player_name)){
    return("J.Struff")
  }
  if(grepl("Struff",player_name)){
    return("J.Struff")
  }
  if(grepl("Begu",player_name)){
    return("I.Begu")
  }
  if(grepl("C.Suarez",player_name)){
    return("C.Suarez")
  }
  if(grepl("C.Wozniack",player_name)){
    return("C.Wozniack")
  }
  if(grepl("B.Zahlavova",player_name)){
    return("B.Zahlavova")
  }
  if(grepl("A.Medina",player_name)){
    return("A.Medina")
  }
  if(grepl("A.Bogomolov",player_name)){
    return("A.Bogomolov")
  }
  if(grepl("Schmiedlova",player_name)){
    return("A.Schmiedlova")
  }
  if(grepl("Torro-Flor",player_name)){
    return("M.Torro-Flor")
  }
  else{
    return(player_name)
  }
}

fixed1 <- sapply(GrandSlam$PLAYER1,fixed_name)
fixed2 <- sapply(GrandSlam$PLAYER2,fixed_name)
GrandSlam$PLAYER1 <- fixed1
GrandSlam$PLAYER2 <- fixed2
all_player=c(GrandSlam$PLAYER1,GrandSlam$PLAYER2)
```

After fixed player names, there is `r length(unique(all_player))` player on this data set.

```{r head_tail2, echo=FALSE}
kable(head(GrandSlam[,c(1:2)],3), label = "Head of the data")
```

Except player name columns, data seems well tabulated data. There is no unnecessary columns. There is `r sum(duplicated(GrandSlam))` duplicated observations in the data set. Player names fixed too.

Now character values, "Round" and "Result" can be changed to factor. And finalize structure of the data is:

```{r factorize,include=FALSE,echo=FALSE}
## Change 'Result' value for player-1 1 and player-2 2:
GrandSlam$RESULT <- ifelse(GrandSlam$RESULT==0, 2,1)
## Convert variables to factor
GrandSlam$PLAYER1 <- factor(GrandSlam$PLAYER1)
GrandSlam$PLAYER2 <- factor(GrandSlam$PLAYER2)
GrandSlam$RESULT <-factor(GrandSlam$RESULT)
GrandSlam$ROUND <-factor(GrandSlam$ROUND)
GrandSlam$TOURNAMENT <-factor(GrandSlam$TOURNAMENT)
GrandSlam$GENDER <-factor(GrandSlam$GENDER)
dumy<-GrandSlam%>%select(c(RESULT,PLAYER1,PLAYER2,ROUND,TOURNAMENT,GENDER))
str(dumy)
```

Also there is problem about BPC(Break Points Created) and BPW(Break Points Win). Logically, BPC must be greater or equal to BPW but in some rows BPC is lower than BPW like below example. This fixed by exchanging BPC values by BPW and BPW values by BPC when BPW \> BPC.

```{r BPC_BPW_problem, echo=FALSE}
cond<-which(GrandSlam$BPW.1>GrandSlam$BPC.1)
kable(head(GrandSlam[cond,c("BPC.1","BPW.1","BPC.2","BPW.2")],3),label = "BPC and BPW Problematic Observations")
#Exchanging problematic BPC and BPW observations
for(i in 1:length(GrandSlam$PLAYER1)){
  if (!is.na(GrandSlam$BPC.1[i] < GrandSlam$BPW.1[i])){
    if(GrandSlam$BPC.1[i] < GrandSlam$BPW.1[i]){
    old_BPC <- GrandSlam$BPC.1[i]
    old_BPW <- GrandSlam$BPW.1[i]
    GrandSlam$BPC.1[i] <- old_BPW
    GrandSlam$BPW.1[i] <- old_BPC
  }
  if(GrandSlam$BPC.2[i] < GrandSlam$BPW.2[i]){
    old_BPC <- GrandSlam$BPC.2[i]
    old_BPW <- GrandSlam$BPW.2[i]
    GrandSlam$BPC.2[i] <- old_BPW
    GrandSlam$BPW.2[i] <- old_BPC
  }
  }
}
```

There are similar problems with NPA and NPW for Aus open and French Open tournaments, NPA should be greater or equal to NPW. This fixed by exchanging NPA values by NPW and NPW values by NPA when NPW \> NPA.

```{r NPA_NPW_problem, echo=FALSE}
cond<-which(GrandSlam$NPW.1>GrandSlam$NPA.1)
kable(head(GrandSlam[cond,c("NPA.1","NPW.1","NPA.2","NPW.2")],3),label = "NPA and NPW Problematic Observations")
#Exchanging problematic NPA and NPW observations
for(i in 1:length(GrandSlam$PLAYER1)){
  if (!is.na(GrandSlam$NPA.1[i] < GrandSlam$NPW.1[i])){
    if(GrandSlam$NPA.1[i] < GrandSlam$NPW.1[i]){
    old_NPA <- GrandSlam$NPA.1[i]
    old_NPW <- GrandSlam$NPW.1[i]
    GrandSlam$NPA.1[i] <- old_NPW
    GrandSlam$NPW.1[i] <- old_NPA
  }
  if(GrandSlam$NPA.2[i] < GrandSlam$NPW.2[i]){
    old_NPA <- GrandSlam$NPA.2[i]
    old_NPW <- GrandSlam$NPW.2[i]
    GrandSlam$NPA.2[i] <- old_NPW
    GrandSlam$NPW.2[i] <- old_NPA
  }
  }
}
```

After fix the problem, all BPC values are greater than BPW. Same for NPA and NPW.

```{r BPC_BPW_new,include=FALSE, echo=FALSE}
head(GrandSlam[cond,c("BPC.1","BPW.1","BPC.2","BPW.2")],3)
head(GrandSlam[cond,c("NPA.1","NPW.1","NPA.2","NPW.2")],3)
```

## 4. Explanatory Data Analysis(EDA) and Confirmatory Data Analysis(CDA)

### Summary Statistics

Below there are frequency tables for tournament, round, result and gender. Ausopen and French open tournaments have most number of match. Also, as expected most matches played at round 1. Number of male matches are greater than female matches. Moreover, Most round 1 matches played at US open, but at the remaining round US Open matches are not much when considering other tournaments. There can be incomplete data for US Open.

```{r freq_table, echo=FALSE}
## Frequency table for categorical
kable(summary(GrandSlam%>% select(c(TOURNAMENT,ROUND,RESULT,GENDER))))
kable(table(GrandSlam$TOURNAMENT,GrandSlam$ROUND))
```

Summary statistics for numeric variables are below. Average performances are almost equal for player 1 and player 2 statistics. Average performance of tennis players can be seen in this summary statistics.

```{r summary, echo=FALSE}
##Summary statistics
sum1<-GrandSlam %>%
  select(PLAYER1,PLAYER2)
sum2 <-GrandSlam %>% 
  select(FSP.1,FSP.2,FSW.1,FSW.2,ACE.1,ACE.2,BPC.1,BPC.2)
sum3 <-GrandSlam %>% 
  select(SSP.1,SSP.2,SSW.1,SSW.2 )
sum4 <-GrandSlam %>% 
  select(ACE.1,ACE.2,DBF.1,DBF.2)
sum5 <-GrandSlam %>% 
  select(WNR.1,WNR.2, UFE.1,UFE.2)
sum6 <-GrandSlam %>% 
  select(BPC.1,BPC.2,BPW.1,BPW.2)
sum7 <-GrandSlam %>% 
  select(NPA.1,NPA.2,NPW.1,NPW.2,TPW.1,TPW.2 )

kable(summary(sum2))
```

Also, set result summary is like below, as seen, there are a lot of NA values for ST4 and ST5 especially. This is because most of the match is not last to 5 or 4 set. It is over in 2 or 3 sets.

```{r set_sum, echo=FALSE}
sum8 <-GrandSlam %>% 
  select(ST1.1,ST2.1,ST3.1,ST4.1,ST5.1)
sum9 <-GrandSlam %>% 
  select(ST1.2,ST2.2,ST3.2,ST4.2,ST5.2)
kable(summary(sum8))
```

### Research Questions

#### How does number of break points win (BPW) and break points created (BPC) corralete between 2 player according to result?

As seen in the scatter plot, there is correlation between result and break points win. If player has more break points than opponent player, then, player that has more BPW and BPC probably win the match.

```{r EDA_1, echo=FALSE, warning=FALSE}
GrandSlam %>%
  ggplot(aes(x=BPW.1,y=BPW.2,fill = RESULT,colour=RESULT))+
  geom_point()+
  geom_jitter()+
  labs(title = "Scatter Plot of BPW.1 and BPW.2 by Result")+
  theme_bw()
  
GrandSlam %>%
  ggplot(aes(x=BPC.1,y=BPC.2,fill = RESULT, colour = RESULT))+
  geom_point()+
  labs(title = "Scatter Plot of BPC.1 and BPC.2 by Result")+
  theme_bw()
```

Hypothesis t-test can be conduct to show avarage BPC or BPW is greater for winning player.

```{r CDA_1, echo=FALSE, warning=FALSE}
BPC.1.P1win <- GrandSlam %>%
  filter(RESULT==1) %>%
  select(BPC.1)

BPC.2.P1win <- GrandSlam %>%
  filter(RESULT==1) %>%
  select(BPC.2)

# Perform one-tailed t-test
## Normality check
shapiro.test(BPC.1.P1win$BPC.1)
## Wilcox test
w_test_BPC <- wilcox.test(BPC.1.P1win$BPC.1, BPC.2.P1win$BPC.2,alternative = "greater")
```

#### How does change distribution of first serve percentage (FSP) and First serve winning (FSW) for winning and losing player?

As seen on the density plot, when player win the match, player's first serve percentage is increase. Therefore, first serve percentage can be effective for winning the match. Similarly, box plot of FSP show that winner player has more FSW than loser one. So, having more FSW can effect the result.

```{r FSP_dens, echo=FALSE, warning=FALSE}
GrandSlam %>%
  ggplot(aes(x=FSP.1,fill = "blue"))+
  geom_density(alpha = 0.4,fill = "blue")+
  geom_density(aes(x=FSP.2,fill = "red"),alpha = 0.4, fill = "red")+
  labs(title="Density Plot of First Serve Percentage group by Result",x="FSP.1(blue) and FSP.2(red)")+
  facet_wrap(~RESULT)+
  theme_bw()

GrandSlam %>%
  ggplot(aes(y=FSW.1,fill = RESULT))+
  geom_boxplot()+
  facet_wrap(~RESULT)+
  ggtitle("Box Plot of FSW.1 group by Result")+
  theme_bw()

GrandSlam %>%
  ggplot(aes(y=FSW.2,fill = RESULT))+
  geom_boxplot()+
  facet_wrap(~RESULT)+
  ggtitle("Box Plot of FSW.2 group by Result")+
  theme_bw()
```

For confirmatory data analysis for this research question, two paired t-test can be conduct too. As seen on the t-test result, mean of FSP.1 is changed significantly when result change. t-tests for FSP.2 and FSW.2 are like FSP.1 and FSP.2, t-test resuÅts can be seen on r code file.

```{r CDA_2, echo=FALSE, warning=FALSE}
winning_player1 <- GrandSlam[GrandSlam$RESULT == 1, ]
winning_player2 <- GrandSlam[GrandSlam$RESULT == 2, ]

# Conduct two-sample t-tests for FSP
fsp1_P1win <- winning_player1$FSP.1
fsp1_P2win <- winning_player2$FSP.1
t_test_fsp1 <- t.test(fsp1_P1win, fsp1_P2win,var.equal = TRUE)
print("Two-sample t-test for First Serve Percentage (FSP.1):")
print(t_test_fsp1)

# Conduct two-sample t-tests for FSW
fsw1_P1win <- winning_player1$FSW.1
fsw1_P2win <- winning_player2$FSW.1
##Normality check
shapiro.test(fsw1_P1win)

wilcox.test(fsp1_P1win, fsp1_P2win,alternative = "greater")
```

```{r CDA_2_2, echo=FALSE,include=FALSE, warning=FALSE}
# Conduct two-sample t-tests for FSP
fsp2_P1win <- winning_player1$FSP.2
fsp2_P2win <- winning_player2$FSP.2
t_test_fsp2 <- t.test(fsp2_P1win, fsp2_P2win,var.equal = TRUE)
print("Two-sample t-test for First Serve Percentage (FSP.2):")
print(t_test_fsp2)

# Conduct two-sample t-tests for FSW
fsw2_P1win <- winning_player1$FSW.2
fsw2_P2win <- winning_player2$FSW.2
t_test_fsw2 <- t.test(fsw2_P1win, fsw2_P2win,var.equal = TRUE)
print("Two-sample t-test for First Serve Winning (FSW.2):")
print(t_test_fsw2)
```

#### How does distribution of number of double faul (DBF) and aces (ACE) change for different tournaments grouped by gender?

On this part, ACE variable is created by summing of ACE.1 and ACE.2. Similarly other variables are summing and total of player 1 and player 2 statistic variables are created. Aim of this research is investigating effect of different tournament on player performance. Each tournament have different surface type so this should be effect the match statistics. As seen in the boxplots, at French open tournament, players do less ace than other tounaments. Clay surface (French open surface) can lead to this, because clay surface slow down the ball. Also, in the boxplot of DBF, we can say that players do more double foul at the US and AUS open tournaments. Both tournaments has hard surfaces. Additionally, there is significant diffrence on male and female statistics for ACE, male can do more ACE than womwn according to this graph but number of sets are not same for male and female matches. Female matches are best of 3, but male matches are best of 5. So, this can be reason for that.

```{r EDA_3, echo=FALSE, warning=FALSE}
## Creating Total statistics and box plot code.
GrandSlam <- GrandSlam %>%
  mutate(TPW=TPW.1+TPW.2,FSW=FSW.1+FSW.2,
        SSW=SSW.1+SSW.2,ACE=ACE.1+ACE.2,DBF=DBF.1+DBF.2, WNR=WNR.1+WNR.2,
         UFE=UFE.1+UFE.2, BPC =BPC.1+BPC.2, BPW=BPW.1+BPW.2, NPA=NPA.1+NPA.2,
         NPW=NPW.1+NPW.2)

ggplot(GrandSlam,aes(y=ACE,fill=TOURNAMENT))+
  geom_boxplot()+
  facet_wrap(~GENDER)+
  ggtitle("Boxplot of ACE for each tournement group by gender")+
  theme_bw()

ggplot(GrandSlam,aes(y=DBF,fill=TOURNAMENT))+
  geom_boxplot()+
  facet_wrap(~GENDER)+
  ggtitle("Boxplot of DBF for each tournement group by gender")+
  theme_bw()
```

With analysis of variance (ANOVA) for DBF and ACE, We can see there are significant difference between tournaments and gender for 0.05 significance level.

```{r CDA_3, echo=FALSE, warning=FALSE}
# Conduct ANOVA for DBF
anova_dbf <- aov(DBF ~ TOURNAMENT + GENDER, data = GrandSlam)
print("ANAVO of DBF")
summary(anova_dbf)

# Conduct ANOVA for ACE
anova_ace <- aov(ACE ~ TOURNAMENT + GENDER, data = GrandSlam)
print("ANAVO of ACE")
summary(anova_ace)
```

#### Are there differences in the net points attempt (NPA) and net points win (NPW) by players across different rounds of the tournament by result?

NPA and NPW has right skewed distribution for each round except 7th round, but in 7th round we have 8 observation so it can mislead the interpretation of this plot for 7th round. Therefore player NPA and NPW performances are similar for all rounds except 7th.

```{r EDA_4,echo=FALSE, warning=FALSE}
## Violin plot
ggplot(GrandSlam,aes(y=NPA,x=ROUND,fill = ROUND))+
  geom_violin()+
  ggtitle("Violin Plot of NPA for each Round")+
  theme_bw()

ggplot(GrandSlam,aes(y=NPW,x=ROUND,fill = ROUND))+
  geom_violin()+
  ggtitle("Violin Plot of NPW for each Round")+
  theme_bw()
```

Again by using ANOVA, we can show there is significant difference or not in NPW and NPA. As seen in ANOVA, for 0.05 significance level, there is no significant difference between NPA and NPW observations of different rounds.

```{r CDA_4, echo=FALSE, warning=FALSE}
## Normality check
shapiro.test(GrandSlam$NPA)
shapiro.test(GrandSlam$NPW)

kruskal_test_result <- kruskal.test(NPA ~ ROUND, data = GrandSlam)
print(kruskal_test_result)
```

#### Is there any correlation between number of break points created (BPC), total points win (TPW) and first serve win (FSW)?

As seen on bubble plot, whwn BPC increase, TPW increase because when player break the opponent player serve, match can be extend. Also number of first serve win tend to increase when TPW and BPC increase.

```{r EDA_5, echo=FALSE, warning=FALSE}
ggplot(GrandSlam,aes(x=TPW,y=BPC,size = FSW))+
  geom_point(colour = "purple", alpha = 0.4)+
  labs(title="Scatter plot of TPW vs BPC size by FSW")+
  theme_bw()
```

For CDA, we can check correlations between BPC, TPW and FSW. As seen on correlation plot,

```{r CDA_5, echo=FALSE, warning=FALSE}

# Compute Pearson correlation coefficients
correlation_matrix <- cor(GrandSlam[,c("BPC", "TPW", "FSW")],use = "complete.obs")

# Print correlation matrix
corrplot(correlation_matrix, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
```

Also, checking p values of correlation test show that there is significant correlation between BPC, TPW and FSW for 0.05 significance level.

```{r CDA_5_2, echo=FALSE, warning=FALSE}
#correlation test
n <- nrow(GrandSlam)
p_values <- cor.test(GrandSlam$BPC, GrandSlam$TPW, method = "pearson", n = n)$p.value
p_values <- c(p_values, cor.test(GrandSlam$BPC, GrandSlam$FSW, method = "pearson", n = n)$p.value)
p_values <- c(p_values, cor.test(GrandSlam$TPW, GrandSlam$FSW, method = "pearson", n = n)$p.value)

# Print p-values

cor_test = c("BPC_TPW","BPC_FSW","TPW_FSW")
print(data.frame(cor_test,p_values))

GrandSlam <- GrandSlam %>%
  select(-c(TPW,FSW,
        SSW,ACE,DBF, WNR,
         UFE, BPC , BPW, NPA,
         NPW))
```

## 5. Missing Observation Cleaning, Imputation and Data Manipulation

Firstly, we should find NA values. As we look at the number of NA observations of variables that include NA (below), we can see there are `r sum(is.na(GrandSlam))` NA values

```{r NA_1, echo=FALSE, warning=FALSE}
na_columns <- GrandSlam %>%
  select_if(~ any(is.na(.)))
# Number of NA for each column
kable(colSums(is.na(na_columns)))

```

For, FNL.1 and FNL.2 NA observation are because of cancelled match. At the [link](https://www.tennisabstract.com/cgi-bin/wplayer-classic.cgi?p=AlizeCornet&f=A2014qqC2), you can see this match (date 13.01.2014) is cancelled. This row is removed from data set.

```{r NA_2, echo=FALSE, warning=FALSE}
#Removing NA FNL values
GrandSlam <- GrandSlam %>%
  filter(!is.na(FNL.1))
```

There is  NA in ACE.1 and ACE.2 columns at same observations, this is MCAR type missing observations, we can fill this values by median value of ACE. Median of ACE.1 and ACE.2 are  and .

```{r NA_6, echo=FALSE, warning=FALSE}
#Removing NA UFE values
GrandSlam <- GrandSlam %>%
  filter(!is.na(UFE.1))
```

```{r NA_7, echo=FALSE, warning=FALSE}
GrandSlam <- GrandSlam %>%
  filter(!is.na(UFE.1))
```

```{r NA_10, echo=FALSE, warning=FALSE}
GrandSlam %>%
  filter(TPW.2>TPW.1)%>%
  ggplot(aes(x=RESULT,fill = RESULT))+
  geom_bar()+
  labs(title = "Results when TPW.2 greater than TPW.1")+
  theme_bw()
# Removing TPW
GrandSlam <- GrandSlam %>%
  select(-c(TPW.1,TPW.2,FNL.1,FNL.2))
```

```{r NA_12, echo=FALSE, warning=FALSE}
# Creating number of total game TG variable
GrandSlam$TG <- rowSums(GrandSlam[, c("ST1.1", "ST2.1", "ST3.1", "ST4.1","ST5.1",
                                       "ST1.2", "ST2.2", "ST3.2", "ST4.2","ST5.2")], na.rm = TRUE)

GrandSlam <- GrandSlam %>%
  select(-c(ST1.1,ST2.1,ST3.1,ST4.1,ST5.1,ST1.2,ST2.2,ST3.2,ST4.2,ST5.2))
# Manipulate the statistics by dividing TG
GrandSlam <- GrandSlam %>%
  mutate(FSW.1 = as.numeric(FSW.1/TG), FSW.2 = as.numeric(FSW.2/TG), SSW.1 = as.numeric(SSW.1/TG),
         SSW.2=as.numeric(SSW.2/TG),ACE.1 = as.numeric(ACE.1/TG), ACE.2 = as.numeric(ACE.2/TG),
         DBF.1=as.numeric(DBF.1/TG),DBF.2=as.numeric(DBF.2/TG),WNR.1=as.numeric(WNR.1/TG),
         WNR.2=as.numeric(WNR.2/TG),UFE.1=as.numeric(UFE.1/TG),BPC.1=as.numeric(BPC.1/TG),
         BPC.2=as.numeric(BPC.2/TG),BPW.1=as.numeric(BPW.1/TG),BPW.2=as.numeric(BPW.2/TG),
         NPA.1=as.numeric(NPA.1/TG),NPA.2=as.numeric(NPA.2/TG),NPW.1=as.numeric(NPW.1/TG),
         NPW.2=as.numeric(NPW.2/TG))
```


```{r NA_4, echo=FALSE, warning=FALSE}
## Imputation of ACE values
mice_imp <- mice(GrandSlam, m = 5, seed = 25)
GrandSlam_bfIMP <- GrandSlam 
GrandSlam <- complete(mice_imp,action = 1)
```


```{r NA_13, echo=FALSE, warning=FALSE}
# Removing Player variables
GrandSlam <- GrandSlam %>%
  select(-c(PLAYER1,PLAYER2,TG))

ks_test_result_ACE1 <- ks.test(GrandSlam_bfIMP$ACE.1[!is.na(GrandSlam_bfIMP$ACE.1)], GrandSlam$ACE.1)
print(ks_test_result_ACE1)
ks_test_result_ACE2 <- ks.test(GrandSlam_bfIMP$ACE.2[!is.na(GrandSlam_bfIMP$ACE.2)], GrandSlam$ACE.2)
print(ks_test_result_ACE2)
ks_test_result_DBF1 <- ks.test(GrandSlam_bfIMP$DBF.1[!is.na(GrandSlam_bfIMP$DBF.1)], GrandSlam$DBF.1)
print(ks_test_result_DBF1)
ks_test_result_DBF2 <- ks.test(GrandSlam_bfIMP$DBF.2[!is.na(GrandSlam_bfIMP$DBF.2)], GrandSlam$DBF.2)
print(ks_test_result_DBF2)
ks_test_result_NPA1 <- ks.test(GrandSlam_bfIMP$NPA.1[!is.na(GrandSlam_bfIMP$NPA.1)], GrandSlam$NPA.1)
print(ks_test_result_NPA1)
ks_test_result_NPA2 <- ks.test(GrandSlam_bfIMP$NPA.2[!is.na(GrandSlam_bfIMP$NPA.2)], GrandSlam$NPA.2)
print(ks_test_result_NPA2)
ks_test_result_NPW1 <- ks.test(GrandSlam_bfIMP$NPW.1[!is.na(GrandSlam_bfIMP$NPW.1)], GrandSlam$NPW.1)
print(ks_test_result_NPW1)
ks_test_result_NPW2 <- ks.test(GrandSlam_bfIMP$NPW.2[!is.na(GrandSlam_bfIMP$NPW.2)], GrandSlam$NPW.2)
print(ks_test_result_NPW2)
```

After missing data cleaning and imputation, we have `r dim(GrandSlam)[1]` observations and `r dim(GrandSlam)[2]` variables.

## Statistical Modelling

### Train-Test Data Set Preparation

GrandSlam data set splited by 20% test and 80% training by random selection. Before modelling, numeric variables in the train and test data set should be scaled. Firstly, train set is scaled and then, by using train set mean and standart deviation test set should be scaled too. Test and train sets are scaled after splitting, because, test observations should not be effect anything on the train data set in order to maintain integrity of model evaluation.

```{r train_test, echo=FALSE, warning=FALSE}
## Creating train and test data
set.seed(25)
GrandSlam_idx = sample(nrow(GrandSlam), 653)
GrandSlam_train = GrandSlam[GrandSlam_idx, ]
GrandSlam_test = GrandSlam[-GrandSlam_idx, ]

## Scaling
train_numeric <- GrandSlam_train %>%
  select_if(is.numeric)

train_other <- GrandSlam_train %>%
  select(c(ROUND,RESULT,TOURNAMENT,GENDER))

test_numeric <- GrandSlam_test %>%
  select_if(is.numeric)

test_other <- GrandSlam_test %>%
  select(c(ROUND,RESULT,TOURNAMENT,GENDER))

# Scaling the training predictors
train_mean <- apply(train_numeric, 2, mean)
train_sd <- apply(train_numeric, 2, sd)
train_numeric_standardized <- scale(train_numeric, center = train_mean, scale = train_sd)

# Scaling the test predictors using training mean and sd
test_numeric_standardized <- scale(test_numeric, center = train_mean, scale = train_sd)

# Combine standardized predictors with the response variable
GrandSlam_trn_std <- data.frame(train_numeric_standardized, train_other)
GrandSlam_tst_std <- data.frame(test_numeric_standardized, test_other)
```

### Logistic Regression

Logistic regression is used to predict the RESULT of the tennis matches on this project. As a cross validation method, k-fold cv is used for k equals 10. This cv is made by using "caret" package in r. Our dependent variable should be binary. So, RESULT is binary with 1 or 2.

Independence: predictors should be independent from each other, We can approve that by checking correlation between numeric predictors. As seen on the correlation plot. There are high correlation between NPW and NPA, BPC and BPW, FSP and SSP. So, NPW, BPW and SSP variables are removed from data set.

```{r corr, warning=FALSE}
# Compute Pearson correlation coefficients
numeric_var <- GrandSlam_trn_std %>%
  select(c(NPW.1,NPA.1,NPW.2,NPA.2,BPC.1 ,BPW.1,BPC.2 ,BPW.2,FSP.1, SSP.1,FSP.2, SSP.2))
correlation_matrix <- cor(numeric_var,use = "complete.obs")

# Print correlation matrix
corrplot(correlation_matrix, method = "number", type = "upper", tl.col = "black", tl.srt = 45)
GrandSlam_trn_std <- GrandSlam_trn_std %>%
  select(-c(NPW.1,NPW.2,BPW.1,BPW.2, SSP.1, SSP.2))
GrandSlam_tst_std <- GrandSlam_tst_std %>%
  select(-c(NPW.1,NPW.2,BPW.1,BPW.2, SSP.1, SSP.2))
```

Now, logistic regression can be applied. Logistic regression find that probability of result equal to 2.

FSW, SSW and BPC statistics are more effective than other to predict winner. Also, p-values show that FSW, SSW and BPC are highly significant predictors. FSW and BPC influence can be seen in EDA part too. That shows that, player can practice more serve shoots to increase the win rate. Also, model indicate that breaking the opponent serve with fast shoots is really effective on win rate.

On the other hand, WNR and UFE seems marginally significant and can be effective to predict result.

```{r logistic, warning=FALSE}
#10 k fold cv.
set.seed(25)
train_control <- trainControl(method = "cv", number = 10 ,savePredictions = "final")

log_model <- train(RESULT ~ ., data = GrandSlam_trn_std, method = "glm",family=binomial,
                      trControl = train_control)

log_model_1<-log_model$finalModel
summary(log_model)
```

Other predictors are not significant, so we can remake the logistic regression with significant predictors.

Now all predictors are significant to predict RESULT. FSW is the most effective statistics to win the match. When FSW.1 change one unit, the log odds of the outcome decrease 3.11214 units. This means there is negative relationship between probability of result 2 and FSW.1. Similarly SSW.1, BPC.1, WNR.1 and UFE.2 has negative effect to result equal 2. As expected, FSW.2, SSW.2, BPC.2, WNR.2 and UFE.1 has positive relationship.

```{r logistic2, warning=FALSE}
log_model <- train(RESULT ~ FSW.1+SSW.1+BPC.1+WNR.1+UFE.1+FSW.2+SSW.2+BPC.2+WNR.2+UFE.2, data = GrandSlam_trn_std, method = "glm",family=binomial,
                      trControl = train_control)
log_model1<- log_model$finalModel
summary(log_model)
```

You can find vif matrix of logistic regression below. There are no higher than 5 vif value. So, there is no highly correlated variables that lead multicollinearity.

```{r vif}
vif(log_model1)
```

There is confusion matrix for test data and performance statistics for test and train data.

```{r log_performance, echo=FALSE, warning=FALSE}
# Extract the final predictions from the cross-validation
test_pred <- predict(log_model, newdata = GrandSlam_tst_std)

# Create confusion matrix
conf_matrix <- confusionMatrix(test_pred, GrandSlam_tst_std$RESULT)
# Convert confusion matrix to data frame
conf_matrix_df <- as.data.frame(conf_matrix$table)
colnames(conf_matrix_df) <- c("Prediction", "Reference", "Frequency")

# Plotting
ggplot(conf_matrix_df, aes(Prediction,Reference, fill= Frequency)) +
        geom_tile() + geom_text(aes(label=Frequency)) +
        scale_fill_gradient(low="white", high="#009194") +
        labs(x = "Reference",y = "Prediction") +
        scale_x_discrete(labels=c("RESULT 1", "RESULT 2")) +
        scale_y_discrete(labels=c("RESULT 1", "RESULT 2"))+
        ggtitle("Test Data Confusion Matrix of Logistic Regression")

# Extract performance metrics
accuracy <- conf_matrix$overall['Accuracy']
precision <- conf_matrix$byClass['Pos Pred Value']
recall <- conf_matrix$byClass['Sensitivity']
f1_score <- 2 * (precision * recall) / (precision + recall)

# Create a performance table
performance_table_log <- data.frame(
  Metric = c("Accuracy", "Precision", "Recall", "F1-Score"),
  Value = c(accuracy, precision, recall, f1_score))

kable(performance_table_log,  caption = "Test data Performance of Logistic Regression")
```

Accuracy is `r conf_matrix$overall['Accuracy']` for test data which is acceptable and effective result. Other performance parameters show high performance as well.

## APPENDÄ°CES

### APPENDÄ°X A {#appendix-a}

| Name of Variable | Definition of Variable                                                                             |
|--------------------------|----------------------------------------------|
| Player 1         | Name of Player 1 (Nominal)                                                                         |
| Player 2         | Name of Player 2 (Nominal)                                                                         |
| Round            | Round of the tourneament (Nominal Ordinal) (1: 1st elimination round, 7: Final of the tournament ) |
| Result           | Result of the match (0/1) - Referenced on Player 1 is Result = 1 (Nominal)                         |
| FSP.1 and .2     | First Serve Percentage for player 1 (if .2, player 2) (Integer)                                    |
| FSW.1 and .2     | First Serve Won by player 1 (if .2, player 2) (Integer)                                            |
| SSP.1 and .2     | Second Serve Percentage for player 1 (if .2, player 2) (Integer)                                   |
| SSW.1 and .2     | Second Serve Won by player 1 (if .2, player 2) (Integer)                                           |
| ACE.1 and .2     | Aces won by player 1 (if .2, player 2) (Integer)                                                   |
| DBF.1 and .2     | Double Faults committed by player 1 (if .2, player 2) (Integer)                                    |
| WNR.1 and .2     | Winners earned by player 1 (if .2, player 2) (Integer)                                             |
| UFE.1 and .2     | Unforced Errors committed by player 1 (if .2, player 2) (Integer)                                  |
| BPC.1 and .2     | Break Points Created by player 1 (if .2, player 2) (Integer)                                       |
| BPW.1 and .2     | Break Points Won by player 1 (if .2, player 2) (Integer)                                           |
| NPA.1 and .2     | Net Points Attempted by player 1 (if .2, player 2) (Integer)                                       |
| NPW.1 and .2     | Net Points Won by player 1 (if .2, player 2) (Integer)                                             |
| TPW.1 and .2     | Total Points Won by player 1 (if .2, player 2) (Integer)                                           |
| ST1.1 and .2     | Set 1 result for Player 1 (if .2, player 2) (Integer)                                              |
| ST2.1 and .2     | Set 2 Result for Player 1 (if .2, player 2) (Integer)                                              |
| ST3.1 and .2     | Set 3 Result for Player 1 (if .2, player 2) (Integer)                                              |
| ST4.1 and .2     | Set 4 Result for Player 1 (if .2, player 2) (Integer)                                              |
| ST5.1 and .2     | Set 5 Result for Player 1 (if .2, player 2) (Integer)                                              |
| FNL.1 and .2     | Final Number of Games Won by Player 1 (if .2, player 2) (Integer)                                  |
| tournament       | Tournament name                                                                                    |
| gender           | Tournament gender                                                                                  |

: Variable Name and Definition

### APPENDÄ°X B

VIF matrix of logistic regression:

```{r vif22, echo=FALSE}
vif(log_model_1)
```